{"version":3,"sources":["components/ThoughtList/index.js","utils/mutations.js","components/ThoughtForm/index.js","utils/queries.js","pages/Home.js","components/Header/index.js","components/Footer/index.js","App.js","reportWebVitals.js","index.js"],"names":["ThoughtList","thoughts","title","length","map","thought","className","thoughtAuthor","style","fontSize","createdAt","thoughtText","_id","ADD_THOUGHT","gql","ThoughtForm","useState","formState","setFormState","characterCount","setCharacterCount","useMutation","addThought","error","handleFormSubmit","event","a","preventDefault","variables","data","window","location","reload","console","handleChange","target","name","value","onSubmit","placeholder","onChange","type","QUERY_THOUGHTS","Home","useQuery","loading","border","Header","Footer","role","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1f651c1.chunk.js","sourcesContent":["import React from 'react';\n\nconst ThoughtList = ({ thoughts, title }) => {\n  if (!thoughts.length) {\n    return <h3>No Thoughts Yet</h3>;\n  }\n\n  return (\n    <div>\n      <h3>{title}</h3>\n      {thoughts &&\n        thoughts.map((thought) => (\n          <div key={thought._id} className=\"card mb-3\">\n            <h4 className=\"card-header bg-primary text-light p-2 m-0\">\n              {thought.thoughtAuthor} <br />\n              <span style={{ fontSize: '1rem' }}>\n                had this thought on {thought.createdAt}\n              </span>\n            </h4>\n            <div className=\"card-body bg-light p-2\">\n              <p>{thought.thoughtText}</p>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ThoughtList;\n","import { gql } from '@apollo/client';\n\nexport const ADD_THOUGHT = gql`\n  mutation addThought($thoughtText: String!, $thoughtAuthor: String!) {\n    addThought(thoughtText: $thoughtText, thoughtAuthor: $thoughtAuthor) {\n      _id\n      thoughtText\n      thoughtAuthor\n      createdAt\n      comments {\n        _id\n        commentText\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\n// TODO: Add code to import necessary hook from Apollo Client\nimport { useMutation } from '@apollo/client';\nimport { ADD_THOUGHT } from '../../utils/mutations';\n\nconst ThoughtForm = () => {\n  const [formState, setFormState] = useState({\n    thoughtText: '',\n    thoughtAuthor: '',\n  });\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addThought, { error }] = useMutation(ADD_THOUGHT);\n\n  // TODO: Add code to set up mutation\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      // TODO: Add code to execute asynchronous mutation function returned by `useMutation()` hook and pass in `formState` object\n      const { data } = await addThought({\n        variables: { formState },\n      });\n\n      window.location.reload();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'thoughtText' && value.length <= 280) {\n      setFormState({ ...formState, [name]: value });\n      setCharacterCount(value.length);\n    } else if (name !== 'thoughtText') {\n      setFormState({ ...formState, [name]: value });\n    }\n  };\n\n  return (\n    <div>\n      <h3>What's on your techy mind?</h3>\n\n      <p\n        className={`m-0 ${characterCount === 280 || error ? 'text-danger' : ''\n          }`}\n      >\n        Character Count: {characterCount}/280\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\n      </p>\n      <form\n        className=\"flex-row justify-center justify-space-between-md align-center\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"col-12\">\n          <textarea\n            name=\"thoughtText\"\n            placeholder=\"Here's a new thought...\"\n            value={formState.thoughtText}\n            className=\"form-input w-100\"\n            onChange={handleChange}\n          ></textarea>\n        </div>\n        <div className=\"col-12 col-lg-9\">\n          <input\n            name=\"thoughtAuthor\"\n            placeholder=\"Add your name to get credit for the thought...\"\n            value={formState.thoughtAuthor}\n            className=\"form-input w-100\"\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"col-12 col-lg-3\">\n          <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\n            Add Thought\n          </button>\n        </div>\n        {error && (\n          <div className=\"col-12 my-3 bg-danger text-white p-3\">\n            Something went wrong...\n          </div>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default ThoughtForm;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_THOUGHTS = gql`\n  query getThoughts {\n    thoughts {\n      _id\n      thoughtText\n      thoughtAuthor\n      createdAt\n    }\n  }\n`;\n","import React from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport ThoughtList from '../components/ThoughtList';\nimport ThoughtForm from '../components/ThoughtForm';\n\nimport { QUERY_THOUGHTS } from '../utils/queries';\n\nconst Home = () => {\n  const { loading, data } = useQuery(QUERY_THOUGHTS);\n  const thoughts = data?.thoughts || [];\n\n  return (\n    <main>\n      <div className=\"flex-row justify-center\">\n        <div\n          className=\"col-12 col-md-10 mb-3 p-3\"\n          style={{ border: '1px dotted #1a1a1a' }}\n        >\n          <ThoughtForm />\n        </div>\n        <div className=\"col-12 col-md-8 mb-3\">\n          {loading ? (\n            <div>Loading...</div>\n          ) : (\n            <ThoughtList\n              thoughts={thoughts}\n              title=\"Some Feed for Thought(s)...\"\n            />\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst Header = () => {\n  return (\n    <header className=\"bg-primary text-light mb-4 py-3 flex-row align-center\">\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\n        <h1 className=\"m-0\">Tech Thoughts</h1>\n        <p className=\"m-0\">Get into the mind of a programmer.</p>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className=\"w-100 mt-auto bg-secondary p-4\">\n      <div className=\"container text-center mb-5\">\n        <h4>\n          Made with{' '}\n          <span\n            className=\"emoji\"\n            role=\"img\"\n            aria-label=\"heart\"\n            aria-hidden=\"false\"\n          >\n            ❤️\n          </span>{' '}\n          by the Tech Thoughts team.\n        </h4>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nimport Home from './pages/Home';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"flex-column justify-flex-start min-100-vh\">\n        <Header />\n        <div className=\"container\">\n          <Home />\n        </div>\n        <Footer />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}