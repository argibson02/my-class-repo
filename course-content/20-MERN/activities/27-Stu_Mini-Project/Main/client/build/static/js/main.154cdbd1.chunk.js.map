{"version":3,"sources":["utils/queries.js","pages/Home.js","utils/mutations.js","pages/Matchup.js","pages/Vote.js","pages/NotFound.js","App.js","index.js"],"names":["QUERY_TECH","gql","QUERY_MATCHUPS","Home","useQuery","fetchPolicy","loading","data","matchupList","matchups","className","map","matchup","to","pathname","_id","tech1","tech2","CREATE_MATCHUP","CREATE_VOTE","Matchup","techList","tech","useState","formData","setFormData","history","useHistory","useMutation","createMatchup","error","handleInputChange","event","target","name","value","handleFormSubmit","a","preventDefault","variables","push","console","onSubmit","onChange","type","Vote","id","useParams","createVote","handleVote","techNum","tech1_votes","tech2_votes","onClick","NotFound","location","useLocation","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAEaA,EAAaC,YAAH,2FASVC,EAAiBD,YAAH,gL,OCiCZE,EAxCF,WACX,MAA0BC,YAASF,EAAgB,CACjDG,YAAa,aADPC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAIXC,GAAkB,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAME,WAAY,GAEtC,OACE,sBAAKC,UAAU,kCAAf,UACE,qBAAKA,UAAU,kCAAf,SACE,4DAEF,sBAAKA,UAAU,gBAAf,UACE,6EACCJ,EACC,6CAEA,oBAAII,UAAU,SAAd,SACGF,EAAYG,KAAI,SAACC,GAChB,OACE,6BACE,eAAC,IAAD,CAAMC,GAAI,CAAEC,SAAS,YAAD,OAAcF,EAAQG,MAA1C,UACGH,EAAQI,MADX,QACuBJ,EAAQK,UAFxBL,EAAQG,aAU3B,sBAAKL,UAAU,8BAAf,UACE,gEACA,cAAC,IAAD,CAAMG,GAAG,WAAT,SACE,wBAAQH,UAAU,wBAAlB,sC,yDCnCGQ,EAAiBjB,YAAH,8LAUdkB,EAAclB,YAAH,2NCwETmB,EA9EC,WACd,MAA0BhB,YAASJ,GAA3BM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAEXc,GAAe,OAAJd,QAAI,IAAJA,OAAA,EAAAA,EAAMe,OAAQ,GAE/B,EAAgCC,mBAAS,CACvCP,MAAO,aACPC,MAAO,eAFT,mBAAOO,EAAP,KAAiBC,EAAjB,KAIIC,EAAUC,cAEd,EAAmCC,YAAYV,GAA/C,mBAAOW,EAAP,KAAwBC,EAAxB,KAAwBA,MAElBC,EAAoB,SAACC,GACzB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdV,EAAY,2BAAKD,GAAN,kBAAiBU,EAAOC,MAG/BC,EAAgB,uCAAG,WAAOJ,GAAP,iBAAAK,EAAA,6DACvBL,EAAMM,iBADiB,kBAIET,EAAc,CACnCU,UAAU,eAAMf,KALG,gBAIbjB,EAJa,EAIbA,KAIRmB,EAAQc,KAAR,mBAAyBjC,EAAKsB,cAAcd,MARvB,gDAUrB0B,QAAQX,MAAR,MAVqB,QAavBL,EAAY,CACVT,MAAO,aACPC,MAAO,eAfc,yDAAH,sDAmBtB,OACE,sBAAKP,UAAU,kCAAf,UACE,qBAAKA,UAAU,kCAAf,SACE,2DAEF,qBAAKA,UAAU,gBAAf,SACGJ,EACC,6CAEA,uBAAMoC,SAAUN,EAAhB,UACE,6CACA,wBAAQF,KAAK,QAAQS,SAAUZ,EAA/B,SACGV,EAASV,KAAI,SAACW,GACb,OACE,wBAAuBa,MAAOb,EAAKY,KAAnC,SACGZ,EAAKY,MADKZ,EAAKP,UAMxB,6CACA,wBAAQmB,KAAK,QAAQS,SAAUZ,EAA/B,SACGV,EAASV,KAAI,SAACW,GACb,OACE,wBAAuBa,MAAOb,EAAKY,KAAnC,SACGZ,EAAKY,MADKZ,EAAKP,UAMxB,wBAAQL,UAAU,iBAAiBkC,KAAK,SAAxC,kCAMLd,GAAS,8DCjBDe,EAzDF,WACX,IAAMC,EAAOC,cAAPD,GAEN,EAA0B1C,YAASF,EAAgB,CACjDqC,UAAW,CAAExB,IAAK+B,KADZxC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAIXK,GAAc,OAAJL,QAAI,IAAJA,OAAA,EAAAA,EAAME,WAAY,GAElC,EAAgCmB,YAAYT,GAA5C,mBAAO6B,EAAP,KAAqBlB,EAArB,KAAqBA,MAEfmB,EAAU,uCAAG,WAAOC,GAAP,SAAAb,EAAA,+EAETW,EAAW,CACfT,UAAW,CAAExB,IAAK+B,EAAII,QAASA,KAHlB,sDAMfT,QAAQX,MAAR,MANe,wDAAH,sDAUhB,OACE,sBAAKpB,UAAU,kCAAf,UACE,qBAAKA,UAAU,kCAAf,SACE,wDAEDJ,EACC,6CAEA,sBAAKI,UAAU,6BAAf,UACE,+BACGE,EAAQ,GAAGI,MADd,QAC0BJ,EAAQ,GAAGK,SAErC,+BACGL,EAAQ,GAAGuC,YADd,MAC8BvC,EAAQ,GAAGwC,eAEzC,yBAAQ1C,UAAU,eAAe2C,QAAS,kBAAMJ,EAAW,IAA3D,sBACYrC,EAAQ,GAAGI,SACb,IACV,yBAAQN,UAAU,eAAe2C,QAAS,kBAAMJ,EAAW,IAA3D,sBACYrC,EAAQ,GAAGK,SAEvB,sBAAKP,UAAU,8BAAf,UACE,uBACA,cAAC,IAAD,CAAMG,GAAG,IAAT,SACE,wBAAQH,UAAU,wBAAlB,uCAOPoB,GAAS,8DCzCDwB,MAbf,WACE,IAAIC,EAAWC,cACf,OACE,qBAAK9C,UAAU,kCAAf,SACE,qBAAKA,UAAU,kCAAf,SACE,+CACe,+BAAO6C,EAASzC,mBCDjC2C,EAAS,IAAIC,IAAa,CAC9BC,IAAK,WACLC,MAAO,IAAIC,MA4BEC,MAzBf,WACE,OACE,cAACC,EAAA,EAAD,CAAgBN,OAAQA,EAAxB,SACE,cAAC,IAAD,UACE,qBAAK/C,UAAU,gEAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOsD,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,eAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,UACE,cAAC,EAAD,gBCxBdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.154cdbd1.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const QUERY_TECH = gql`\n  query tech {\n    tech {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_MATCHUPS = gql`\n  query matchups($_id: String) {\n    matchups(_id: $_id) {\n      _id\n      tech1\n      tech2\n      tech1_votes\n      tech2_votes\n    }\n  }\n`;\n","import { Link } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_MATCHUPS } from '../utils/queries';\n\nconst Home = () => {\n  const { loading, data } = useQuery(QUERY_MATCHUPS, {\n    fetchPolicy: \"no-cache\"\n  });\n\n  const matchupList = data?.matchups || [];\n\n  return (\n    <div className=\"card bg-white card-rounded w-50\">\n      <div className=\"card-header bg-dark text-center\">\n        <h1>Welcome to Tech Matchup!</h1>\n      </div>\n      <div className=\"card-body m-5\">\n        <h2>Here is a list of matchups you can vote on:</h2>\n        {loading ? (\n          <div>Loading...</div>\n        ) : (\n          <ul className=\"square\">\n            {matchupList.map((matchup) => {\n              return (\n                <li key={matchup._id}>\n                  <Link to={{ pathname: `/matchup/${matchup._id}` }}>\n                    {matchup.tech1} vs. {matchup.tech2}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n      <div className=\"card-footer text-center m-3\">\n        <h2>Ready to create a new matchup?</h2>\n        <Link to=\"/matchup\">\n          <button className=\"btn btn-lg btn-danger\">Create Matchup!</button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import { gql } from '@apollo/client';\n\nexport const CREATE_MATCHUP = gql`\n  mutation createMatchup($tech1: String!, $tech2: String!) {\n    createMatchup(tech1: $tech1, tech2: $tech2) {\n      _id\n      tech1\n      tech2\n    }\n  }\n`;\n\nexport const CREATE_VOTE = gql`\n  mutation createVote($_id: String!, $techNum: Int!) {\n    createVote(_id: $_id, techNum: $techNum) {\n      _id\n      tech1\n      tech2\n      tech1_votes\n      tech2_votes\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { QUERY_TECH } from '../utils/queries';\nimport { CREATE_MATCHUP } from '../utils/mutations';\n\nconst Matchup = () => {\n  const { loading, data } = useQuery(QUERY_TECH);\n\n  const techList = data?.tech || [];\n\n  const [formData, setFormData] = useState({\n    tech1: 'JavaScript',\n    tech2: 'JavaScript',\n  });\n  let history = useHistory();\n\n  const [createMatchup, { error }] = useMutation(CREATE_MATCHUP);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await createMatchup({\n        variables: { ...formData },\n      });\n\n      history.push(`/matchup/${data.createMatchup._id}`);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setFormData({\n      tech1: 'JavaScript',\n      tech2: 'JavaScript',\n    });\n  };\n\n  return (\n    <div className=\"card bg-white card-rounded w-25\">\n      <div className=\"card-header bg-dark text-center\">\n        <h1>Let's create a matchup!</h1>\n      </div>\n      <div className=\"card-body m-5\">\n        {loading ? (\n          <div>Loading...</div>\n        ) : (\n          <form onSubmit={handleFormSubmit}>\n            <label>Tech 1: </label>\n            <select name=\"tech1\" onChange={handleInputChange}>\n              {techList.map((tech) => {\n                return (\n                  <option key={tech._id} value={tech.name}>\n                    {tech.name}\n                  </option>\n                );\n              })}\n            </select>\n            <label>Tech 2: </label>\n            <select name=\"tech2\" onChange={handleInputChange}>\n              {techList.map((tech) => {\n                return (\n                  <option key={tech._id} value={tech.name}>\n                    {tech.name}\n                  </option>\n                );\n              })}\n            </select>\n            <button className=\"btn btn-danger\" type=\"submit\">\n              Create Matchup!\n            </button>\n          </form>\n        )}\n      </div>\n      {error && <div>Something went wrong...</div>}\n    </div>\n  );\n};\n\nexport default Matchup;\n","import { useQuery, useMutation } from '@apollo/client';\nimport { useParams, Link } from 'react-router-dom';\nimport { CREATE_VOTE } from '../utils/mutations';\nimport { QUERY_MATCHUPS } from '../utils/queries';\n\nconst Vote = () => {\n  let { id } = useParams();\n\n  const { loading, data } = useQuery(QUERY_MATCHUPS, {\n    variables: { _id: id },\n  });\n\n  const matchup = data?.matchups || [];\n\n  const [createVote, { error }] = useMutation(CREATE_VOTE);\n\n  const handleVote = async (techNum) => {\n    try {\n      await createVote({\n        variables: { _id: id, techNum: techNum },\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"card bg-white card-rounded w-50\">\n      <div className=\"card-header bg-dark text-center\">\n        <h1>Here is the matchup!</h1>\n      </div>\n      {loading ? (\n        <div>Loading...</div>\n      ) : (\n        <div className=\"card-body text-center mt-3\">\n          <h2>\n            {matchup[0].tech1} vs. {matchup[0].tech2}\n          </h2>\n          <h3>\n            {matchup[0].tech1_votes} : {matchup[0].tech2_votes}\n          </h3>\n          <button className=\"btn btn-info\" onClick={() => handleVote(1)}>\n            Vote for {matchup[0].tech1}\n          </button>{' '}\n          <button className=\"btn btn-info\" onClick={() => handleVote(2)}>\n            Vote for {matchup[0].tech2}\n          </button>\n          <div className=\"card-footer text-center m-3\">\n            <br></br>\n            <Link to=\"/\">\n              <button className=\"btn btn-lg btn-danger\">\n                View all matchups\n              </button>\n            </Link>\n          </div>\n        </div>\n      )}\n      {error && <div>Something went wrong...</div>}\n    </div>\n  );\n};\n\nexport default Vote;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nfunction NotFound() {\n  let location = useLocation();\n  return (\n    <div className=\"card bg-white card-rounded w-50\">\n      <div className=\"card-header bg-dark text-center\">\n        <h1>\n          No match for <code>{location.pathname}</code>\n        </h1>\n      </div>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport Home from './pages/Home';\nimport Matchup from './pages/Matchup';\nimport Vote from './pages/Vote';\nimport NotFound from './pages/NotFound';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-center align-center min-100-vh bg-primary\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/matchup\">\n              <Matchup />\n            </Route>\n            <Route exact path=\"/matchup/:id\">\n              <Vote />\n            </Route>\n            <Route>\n              <NotFound />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}