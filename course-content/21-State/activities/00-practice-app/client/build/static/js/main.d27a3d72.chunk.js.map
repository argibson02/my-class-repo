{"version":3,"sources":["components/ThoughtList/index.js","utils/mutations.js","utils/queries.js","components/ThoughtForm/index.js","pages/Home.js","components/CommentList/index.js","components/CommentForm/index.js","pages/SingleThought.js","components/Header/index.js","components/Footer/index.js","App.js","reportWebVitals.js","index.js"],"names":["ThoughtList","thoughts","title","length","map","thought","className","thoughtAuthor","style","fontSize","createdAt","thoughtText","to","_id","ADD_THOUGHT","gql","ADD_COMMENT","QUERY_THOUGHTS","QUERY_SINGLE_THOUGHT","ThoughtForm","useState","formState","setFormState","characterCount","setCharacterCount","useMutation","update","cache","addThought","data","readQuery","query","writeQuery","e","console","error","handleFormSubmit","event","a","preventDefault","variables","handleChange","target","name","value","onSubmit","placeholder","lineHeight","onChange","type","Home","useQuery","loading","border","CommentList","comments","log","borderBottom","comment","commentText","CommentForm","thoughtId","setCommentText","addComment","SingleThought","useParams","fontStyle","Header","Footer","location","useLocation","history","useHistory","pathname","onClick","goBack","role","client","ApolloClient","uri","InMemoryCache","App","ApolloProvider","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d27a3d72.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n// TODO: Add code to import necessary component for creating internal hyperlinks\n\nconst ThoughtList = ({ thoughts, title }) => {\n  if (!thoughts.length) {\n    return <h3>No Thoughts Yet</h3>;\n  }\n\n  return (\n    <div>\n      <h3>{title}</h3>\n      {thoughts &&\n        thoughts.map((thought) => (\n          <div key={thought._id} className=\"card mb-3\">\n            <h4 className=\"card-header bg-primary text-light p-2 m-0\">\n              {thought.thoughtAuthor} <br />\n              <span style={{ fontSize: '1rem' }}>\n                had this thought on {thought.createdAt}\n              </span>\n            </h4>\n            <div className=\"card-body bg-light p-2\">\n              <p>{thought.thoughtText}</p>\n            </div>\n            {/* TODO: Add code to create a link to this thought's single thought page at `/thoughts/<id>` */}\n            <Link\n              className=\"btn btn-block btn-squared btn-light text-dark\"\n              to={`/thought/${thought._id}`}\n            >\n              View this thought\n            </Link>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ThoughtList;\n","import { gql } from '@apollo/client';\n\nexport const ADD_THOUGHT = gql`\n  mutation addThought($thoughtText: String!, $thoughtAuthor: String!) {\n    addThought(thoughtText: $thoughtText, thoughtAuthor: $thoughtAuthor) {\n      _id\n      thoughtText\n      thoughtAuthor\n      createdAt\n      comments {\n        _id\n        commentText\n      }\n    }\n  }\n`;\n\nexport const ADD_COMMENT = gql`\n  mutation addComment($thoughtId: ID!, $commentText: String!) {\n    addComment(thoughtId: $thoughtId, commentText: $commentText) {\n      _id\n      thoughtText\n      thoughtAuthor\n      createdAt\n      comments {\n        _id\n        commentText\n        createdAt\n      }\n    }\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_THOUGHTS = gql`\n  query getThoughts {\n    thoughts {\n      _id\n      thoughtText\n      thoughtAuthor\n      createdAt\n    }\n  }\n`;\n\nexport const QUERY_SINGLE_THOUGHT = gql`\n  query getSingleThought($thoughtId: ID!) {\n    thought(thoughtId: $thoughtId) {\n      _id\n      thoughtText\n      thoughtAuthor\n      createdAt\n      comments {\n        _id\n        commentText\n        createdAt\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_THOUGHT } from '../../utils/mutations';\nimport { QUERY_THOUGHTS } from '../../utils/queries';\n\nconst ThoughtForm = () => {\n  const [formState, setFormState] = useState({\n    thoughtText: '',\n    thoughtAuthor: '',\n  });\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addThought, { error }] = useMutation(ADD_THOUGHT, {\n    update(cache, { data: { addThought } }) {\n      try {\n        const { thoughts } = cache.readQuery({ query: QUERY_THOUGHTS });\n\n        cache.writeQuery({\n          query: QUERY_THOUGHTS,\n          data: { thoughts: [addThought, ...thoughts] },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    },\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addThought({\n        variables: { ...formState },\n      });\n\n      setFormState({\n        thoughtText: '',\n        thoughtAuthor: '',\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'thoughtText' && value.length <= 280) {\n      setFormState({ ...formState, [name]: value });\n      setCharacterCount(value.length);\n    } else if (name !== 'thoughtText') {\n      setFormState({ ...formState, [name]: value });\n    }\n  };\n\n  return (\n    <div>\n      <h3>What's on your techy mind?</h3>\n\n      <p\n        className={`m-0 ${\n          characterCount === 280 || error ? 'text-danger' : ''\n        }`}\n      >\n        Character Count: {characterCount}/280\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\n      </p>\n      <form\n        className=\"flex-row justify-center justify-space-between-md align-center\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"col-12\">\n          <textarea\n            name=\"thoughtText\"\n            placeholder=\"Here's a new thought...\"\n            value={formState.thoughtText}\n            className=\"form-input w-100\"\n            style={{ lineHeight: '1.5' }}\n            onChange={handleChange}\n          ></textarea>\n        </div>\n        <div className=\"col-12 col-lg-9\">\n          <input\n            name=\"thoughtAuthor\"\n            placeholder=\"Add your name to get credit for the thought...\"\n            value={formState.thoughtAuthor}\n            className=\"form-input w-100\"\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"col-12 col-lg-3\">\n          <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\n            Add Thought\n          </button>\n        </div>\n        {error && (\n          <div className=\"col-12 my-3 bg-danger text-white p-3\">\n            Something went wrong...\n          </div>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default ThoughtForm;\n","import React from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport ThoughtList from '../components/ThoughtList';\nimport ThoughtForm from '../components/ThoughtForm';\n\nimport { QUERY_THOUGHTS } from '../utils/queries';\n\nconst Home = () => {\n  const { loading, data } = useQuery(QUERY_THOUGHTS);\n  const thoughts = data?.thoughts || [];\n\n  return (\n    <main>\n      <div className=\"flex-row justify-center\">\n        <div\n          className=\"col-12 col-md-10 mb-3 p-3\"\n          style={{ border: '1px dotted #1a1a1a' }}\n        >\n          <ThoughtForm />\n        </div>\n        <div className=\"col-12 col-md-8 mb-3\">\n          {loading ? (\n            <div>Loading...</div>\n          ) : (\n            <ThoughtList\n              thoughts={thoughts}\n              title=\"Some Feed for Thought(s)...\"\n            />\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst CommentList = ({ comments = [] }) => {\n  console.log(comments);\n  if (!comments.length) {\n    return <h3>No Comments Yet</h3>;\n  }\n\n  return (\n    <>\n      <h3\n        className=\"p-5 display-inline-block\"\n        style={{ borderBottom: '1px dotted #1a1a1a' }}\n      >\n        Comments\n      </h3>\n      <div className=\"flex-row my-4\">\n        {comments &&\n          comments.map((comment) => (\n            <div key={comment._id} className=\"col-12 mb-3 pb-3\">\n              <div className=\"p-3 bg-dark text-light\">\n                <h5 className=\"card-header\">\n                  An anonymous user commented{' '}\n                  <span style={{ fontSize: '0.825rem' }}>\n                    on {comment.createdAt}\n                  </span>\n                </h5>\n                <p className=\"card-body\">{comment.commentText}</p>\n              </div>\n            </div>\n          ))}\n      </div>\n    </>\n  );\n};\n\nexport default CommentList;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_COMMENT } from '../../utils/mutations';\n\nconst CommentForm = ({ thoughtId }) => {\n  const [commentText, setCommentText] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addComment, { error }] = useMutation(ADD_COMMENT);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addComment({\n        variables: { thoughtId, commentText },\n      });\n\n      setCommentText('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'commentText' && value.length <= 280) {\n      setCommentText(value);\n      setCharacterCount(value.length);\n    }\n  };\n\n  return (\n    <div>\n      <h4>What are your thoughts on this thought?</h4>\n      <p\n        className={`m-0 ${\n          characterCount === 280 || error ? 'text-danger' : ''\n        }`}\n      >\n        Character Count: {characterCount}/280\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\n      </p>\n      <form\n        className=\"flex-row justify-center justify-space-between-md align-center\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"col-12 col-lg-9\">\n          <textarea\n            name=\"commentText\"\n            placeholder=\"Add your comment...\"\n            value={commentText}\n            className=\"form-input w-100\"\n            style={{ lineHeight: '1.5' }}\n            onChange={handleChange}\n          ></textarea>\n        </div>\n\n        <div className=\"col-12 col-lg-3\">\n          <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\n            Add Comment\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default CommentForm;\n","import React from 'react';\n// TODO: Add code here to import necessary functionality\nimport { useParams } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\n\nimport CommentList from '../components/CommentList';\nimport CommentForm from '../components/CommentForm';\n\nimport { QUERY_SINGLE_THOUGHT } from '../utils/queries';\n\nconst SingleThought = () => {\n  // TODO: Add code here to retrieve the query parameter `thoughtId` from the URL\n  const { thoughtId } = useParams();\n\n  const { loading, data } = useQuery(QUERY_SINGLE_THOUGHT, {\n    // Pass the `thoughtId` URL parameter into query to retrieve this thought's data\n    variables: { thoughtId: thoughtId },\n  });\n\n  const thought = data?.thought || {};\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <div className=\"my-3\">\n      <h3 className=\"card-header bg-dark text-light p-2 m-0\">\n        {thought.thoughtAuthor} <br />\n        <span style={{ fontSize: '1rem' }}>\n          had this thought on {thought.createdAt}\n        </span>\n      </h3>\n      <div className=\"bg-light py-4\">\n        <blockquote\n          className=\"p-4\"\n          style={{\n            fontSize: '1.5rem',\n            fontStyle: 'italic',\n            border: '2px dotted #1a1a1a',\n            lineHeight: '1.5',\n          }}\n        >\n          {thought.thoughtText}\n        </blockquote>\n      </div>\n\n      <div className=\"my-5\">\n        <CommentList comments={thought.comments} />\n      </div>\n      <div className=\"m-3 p-4\" style={{ border: '1px dotted #1a1a1a' }}>\n        <CommentForm thoughtId={thought._id} />\n      </div>\n    </div>\n  );\n};\n\nexport default SingleThought;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n  return (\n    <header className=\"bg-primary text-light mb-4 py-3 flex-row align-center\">\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\n        <Link className=\"text-light\" to=\"/\">\n          <h1 className=\"m-0\">Tech Thoughts</h1>\n        </Link>\n        <p className=\"m-0\">Get into the mind of a programmer.</p>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nconst Footer = () => {\n  const location = useLocation();\n  const history = useHistory();\n  return (\n    <footer className=\"w-100 mt-auto bg-secondary p-4\">\n      <div className=\"container text-center mb-5\">\n        {location.pathname !== '/' && (\n          <button\n            className=\"btn btn-dark mb-3\"\n            onClick={() => history.goBack()}\n          >\n            &larr; Go Back\n          </button>\n        )}\n        <h4>\n          Made with{' '}\n          <span\n            className=\"emoji\"\n            role=\"img\"\n            aria-label=\"heart\"\n            aria-hidden=\"false\"\n          >\n            ❤️\n          </span>{' '}\n          by the Tech Thoughts team.\n        </h4>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport SingleThought from './pages/SingleThought';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <Header />\n          <div className=\"container\">\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/thought/:thoughtId\" component={SingleThought}>\n              <SingleThought />\n            </Route>\n            {/* TODO: Add code here that creates a route for displaying a single thought's comments */}\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}